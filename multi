#!/usr/bin/env node

"use strict";

var app = require('express')(),
    express = require('express'),
    server = require('http').createServer(app),
    io = require('socket.io').listen(server),
    listening = [],
    fs = require('fs'),
    when = require('when'),
    sequence = require('sequence'),
    audioFiles = {},
    config = {},
    htmlString;

try {
    config = require('./config').config;
}
catch(err) {
    console.log(err);
}

server.listen(8080);
app.use("/images", express.static(__dirname + "/images"));
app.use("/static", express.static(__dirname + "/static"));

app.get('/', function (req, res) {
  var ua = req.header('user-agent');
  if (/mobile/i.test(ua)) {
      return res.sendfile(__dirname + '/slave_mobile.html');
  }
  return res.sendfile(__dirname + '/slave.html');
});

app.get('/master', function(req, res) {
    res.sendfile(__dirname + '/master.html');
});

addFiles().then(function(files){
    audioFiles = files;
    logListeners();
    io.sockets.on('connection', function (socket) {
        socket.on('masterEvent', function (data) {
            if (data.audioEvent === 'requestClientList') {
                var htmlString = buildClientsList();
                socket.emit('masterEvent', {
                    'audioEvent': 'updateSources',
                    'sources': htmlString
                });
            }
            else if (data.audioEvent === 'reload') {
                addFiles().then(function(files){
                    audioFiles = files;
                    var htmlString = buildClientsList();
                    socket.broadcast.emit('slaveEvent', data);
                    socket.emit('masterEvent', {
                        'audioEvent': 'updateSources',
                        'sources': htmlString
                    });
                });
            }
            else if (data.audioEvent === 'logSockets') {
                console.log(Object.keys(io.sockets.sockets));
            }
            else {
                socket.broadcast.emit('slaveEvent', data);
            }
        });

        socket.on('slaveEvent', function (data){
            console.log(data);
            if (data.audioEvent === 'loaded') {
                logListeners();
                audioFiles[data.source] = audioFiles[data.source] + 1;
                htmlString = buildClientsList();
                socket.broadcast.emit('masterEvent', {
                    'audioEvent': 'updateSources',
                    'sources': htmlString
                });
            }
            else if (data.audioEvent === 'removeSource') {
                audioFiles[data.source] = audioFiles[data.source] - 1;
                htmlString = buildClientsList();
                socket.broadcast.emit('masterEvent', {
                    'audioEvent': 'updateSources',
                    'sources': htmlString
                });
            }
            else if (data.audioEvent == 'requestSource') {
                var nextFile = getNextAudioFile();
                console.log(nextFile);
                if (nextFile){

                    socket.emit('slaveEvent', {
                        'audioEvent': 'load',
                        'source': nextFile
                    });

                }
                else {
                    nextFile = getRandomAudioFile();
                    socket.emit('slaveEvent', {
                        'audioEvent': 'load',
                        'source': nextFile
                    });
                }
            }
            else if (data.audioEvent === 'setLatency') {
                // callback to client here?
                socket.set('latency', data.latency, function(){});
            }
        });
    });
});

function addFiles(){

    var d = when.defer(),
        filesMap = {},
        fileString;
    if (config.useRemoteFiles &&
            config.remotePath &&
            config.remoteFiles) {
        console.log('Loading remote files from config.js');
        config.remoteFiles.forEach(function(file){
            fileString = config.remotePath + file;
            filesMap[fileString] = 0;
        });
        d.resolve(filesMap);
    }
    else {
        console.log('Attempting to load local files from ./static/audio');
        fs.readdir(__dirname + '/static/audio', function(err, files){
            if (!err){
                files.forEach(function(file){
                    if (file !== '.DS_Store') {
                        filesMap[file] = 0;
                    }

                });
                d.resolve(filesMap);
            }
        });
    }
    return d.promise;
}

function getNextAudioFile(){
    for (var file in audioFiles){
        if (audioFiles[file] === 0) {
            return file;
        }
    }
    return false;
}

function getRandomAudioFile() {
    var result,
        count = 0,
        file;
    for (file in audioFiles)
        if (Math.random() < 1/++count)
           result = file;
    return result;
}

function buildClientsList(){
    var htmlString = '',
        file;
    for (file in audioFiles) {
        if (audioFiles[file]) {
            htmlString = htmlString + '<br/>' + file + ' (' + audioFiles[file] + ')';
        }
    }
    return htmlString;
}

function logListeners(){
    for (var file in audioFiles){
        console.log(file + ': ' + audioFiles[file] + ' listeners.');
    }
}